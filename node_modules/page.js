exports.index = function(req, res){ 
  var mongodb = require('mongodb');   
  var page = req.params.page;  //取得page的值,注意route中的配置,可以有可以没有这个page 
  var total; //分页的总数 
  var pagenum =4; //分页的条数 
  if(page){ 
    page = page; 
  }else{ 
    page = 1; 
  } 
     
  mongodb.connect('mongodb://localhost:27017/test',function(err,conn){ 
    conn.collection('test_insert',function(err,coll){ 
        //这里是取得分页的总数(笔者最开始在这里的时候用的是coll.count()取总数,结果可想而知,所以取总数大家一定要注意) 
        coll.count(function(err,count){ 
            total = count; 
        }) 
        //这里用limit+skip实现mongodb的分页效果,这种写法对于大数据量的分页来说不合适,但是为了方便就这样了 
        //下面是整个的过程,实现了分页实现一个集合中的所有数据 
        //在nodejs连接mongodb的时候判断是否查询出了数据的时候我们用toArray方法获得的第二个参数来判断 
        coll.find().limit(pagenum).skip(pagenum*(page-1)).toArray(function(err,results){ 
            if(results.length){ 
              if(page==1){ 
                var prevpage = page; 
              }else{ 
                var prevpage = page-1; 
              } 
                   
              if(page == Math.ceil(total/pagenum)){ 
                var nextpage = Math.ceil(total/pagenum); 
              }else{ 
   
                //这里要注意下,在对next的时候一定要对page加parseInt方法,不然他会按照字符串来相加,至于为什么,目前我也不清楚,但是只要加了parseInt就是正确的了 
                var nextpage = parseInt(page)+1; 
              } 
         
              res.render('index', 
                { 
                    title:'123', 
                    username: req.session.username, 
                    allIndexs:results, 
                    prevpage:prevpage, 
                    nextpage:nextpage 
                    //page: "<a href='/"+prevpage+"'>prev</a>   <a href='/"+nextpage+"'>next</a>" 
                }        
              ); 
            }else{ 
                console.log('没有任何数据'); 
            } 
            conn.close();  //每次执行完后都要把链接给关掉(注意关掉的位置,不能放在collection的时候就关闭,不然上面的数据永远取不到) 
        }) 
    }) 
  }); 
};